function ahojSvete() {
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  sheet.getRange("A1").setValue("Ahoj, Svete!");
}
function zarovnejTextNaStred() {
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  sheet.getRange("A1:B1").setHorizontalAlignment("center");
}
/**
 * Generuje QR k√≥d pro zadan√Ω text pomoc√≠ QR-Server API.
 * Google Charts API u≈æ nen√≠ dostupn√©, proto pou≈æ√≠v√°me alternativu.
 */
function vygenerujQRKod() {
  var text = 'https://github.com/JaromirIhln'; // Text pro QR k√≥d
  var velikost = 120; // Velikost QR k√≥du v pixelech (zmen≈°eno z 200)
  
  // Pou≈æit√≠ QR-Server API jako alternativy k Google Charts
  var qrUrl = 'https://api.qrserver.com/v1/create-qr-code/?' +
    'size=' + velikost + 'x' + velikost +
    '&data=' + encodeURIComponent(text);
  
  Logger.log('üî≤ QR k√≥d URL: ' + qrUrl);
  
  try {
    // Vlo≈æ QR k√≥d jako obr√°zek do Sheets
    var response = UrlFetchApp.fetch(qrUrl);
    if (response.getResponseCode() === 200) {
      var blob = response.getBlob();
      var sheet = SpreadsheetApp.getActiveSheet();
      sheet.insertImage(blob, 2, 2); // ≈ò√°dek 2, sloupec B
      
      SpreadsheetApp.getActiveSpreadsheet().toast('QR k√≥d vygenerov√°n!', 'Hotovo', 3);
    } else {
      throw new Error('API vratilo chybu: ' + response.getResponseCode());
    }
  } catch (error) {
    Logger.log('‚ùå Chyba p≈ôi generov√°n√≠ QR k√≥du: ' + error.toString());
    SpreadsheetApp.getActiveSpreadsheet().toast('Chyba p≈ôi generov√°n√≠ QR k√≥du: ' + error.toString(), 'Chyba', 5);
  }
}

/**
 * Alternativn√≠ funkce pro generov√°n√≠ QR k√≥du s v√≠ce mo≈ænostmi API.
 * Pokud jedna slu≈æba nefunguje, zkus√≠ dal≈°√≠.
 */
function vygenerujQRKodAlternativni() {
  var text = 'https://github.com/JaromirIhln'; // Text pro QR k√≥d
  var velikost = 120; // Velikost QR k√≥du v pixelech (zmen≈°eno z 200)
  
  // Seznam r≈Øzn√Ωch QR API slu≈æeb
  var qrApis = [
    {
      name: 'QR-Server',
      url: 'https://api.qrserver.com/v1/create-qr-code/?size=' + velikost + 'x' + velikost + '&data=' + encodeURIComponent(text)
    },
    {
      name: 'QRCode-Monkey (ve≈ôejn√©)',
      url: 'https://api.qrserver.com/v1/create-qr-code/?size=' + velikost + 'x' + velikost + '&format=png&data=' + encodeURIComponent(text)
    }
  ];
  
  for (var i = 0; i < qrApis.length; i++) {
    try {
      Logger.log('üîÑ Zkou≈°√≠m API: ' + qrApis[i].name);
      var response = UrlFetchApp.fetch(qrApis[i].url);
      
      if (response.getResponseCode() === 200) {
        var blob = response.getBlob();
        var sheet = SpreadsheetApp.getActiveSheet();
        sheet.insertImage(blob, 2, 4); // ≈ò√°dek 2, sloupec D
        
        SpreadsheetApp.getActiveSpreadsheet().toast('QR k√≥d vygenerov√°n pomoc√≠ ' + qrApis[i].name + '!', 'Hotovo', 3);
        Logger.log('‚úÖ QR k√≥d √∫spƒõ≈°nƒõ vygenerov√°n pomoc√≠: ' + qrApis[i].name);
        return; // √öspƒõch, konƒç√≠me
      }
    } catch (error) {
      Logger.log('‚ùå API ' + qrApis[i].name + ' selhalo: ' + error.toString());
      continue; // Zkus√≠me dal≈°√≠ API
    }
  }
  
  // Pokud v≈°echna API selhala
  SpreadsheetApp.getActiveSpreadsheet().toast('V≈°echna QR API selhala. Zkuste to pozdƒõji.', 'Chyba', 5);
  Logger.log('‚ùå V≈°echna QR API selhala');
}

/**
 * Sma≈æe v≈°echny obr√°zky (vƒçetnƒõ QR k√≥d≈Ø) z aktivn√≠ho sheetu.
 */
function smazatVsechnyObrazky() {
  var sheet = SpreadsheetApp.getActiveSheet();
  var images = sheet.getImages();
  
  Logger.log('üîç Nalezeno obr√°zk≈Ø k smaz√°n√≠: ' + images.length);
  
  if (images.length === 0) {
    SpreadsheetApp.getActiveSpreadsheet().toast('≈Ω√°dn√© obr√°zky k smaz√°n√≠.', 'Info', 2);
    return;
  }
  
  // Sma≈æ v≈°echny obr√°zky
  for (var i = 0; i < images.length; i++) {
    images[i].remove();
  }
  
  SpreadsheetApp.getActiveSpreadsheet().toast('Smaz√°no ' + images.length + ' obr√°zk≈Ø.', 'Hotovo', 3);
  Logger.log('‚úÖ √öspƒõ≈°nƒõ smaz√°no ' + images.length + ' obr√°zk≈Ø');
}

/**
 * Sma≈æe pouze poslednƒõ p≈ôidan√Ω obr√°zek.
 */
function smazatPosledniObrazek() {
  var sheet = SpreadsheetApp.getActiveSheet();
  var images = sheet.getImages();
  
  if (images.length === 0) {
    SpreadsheetApp.getActiveSpreadsheet().toast('≈Ω√°dn√© obr√°zky k smaz√°n√≠.', 'Info', 2);
    return;
  }
  
  // Sma≈æ posledn√≠ obr√°zek (poslednƒõ p≈ôidan√Ω)
  images[images.length - 1].remove();
  
  SpreadsheetApp.getActiveSpreadsheet().toast('Posledn√≠ obr√°zek smaz√°n.', 'Hotovo', 2);
  Logger.log('‚úÖ Posledn√≠ obr√°zek smaz√°n');
}
/**
 * Syst√©m toast notifikac√≠ s r≈Øzn√Ωmi typy zpr√°v.
 */
function zobrazNotifikaci() {
  var spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  
  // R≈Øzn√© typy notifikac√≠
  spreadsheet.toast('‚úÖ Operace dokonƒçena √∫spƒõ≈°nƒõ!', '√öspƒõch', 3);
  
  Utilities.sleep(4000);
  spreadsheet.toast('‚ö†Ô∏è Varov√°n√≠: Zkontrolujte data!', 'Varov√°n√≠', 5);
  
  Utilities.sleep(6000);
  spreadsheet.toast('‚ùå Chyba p≈ôi zpracov√°n√≠!', 'Chyba', 8);
  
  Utilities.sleep(9000);
  spreadsheet.toast('‚ÑπÔ∏è Informace: Proces bƒõ≈æ√≠ na pozad√≠', 'Info', 4);
}

// Pomocn√© funkce pro rychl√© pou≈æit√≠
function uspechNotifikace(zprava) {
  SpreadsheetApp.getActiveSpreadsheet().toast('‚úÖ ' + zprava, '√öspƒõch', 3);
}

function chybaNotifikace(zprava) {
  SpreadsheetApp.getActiveSpreadsheet().toast('‚ùå ' + zprava, 'Chyba', 8);
}
/**
 * Syst√©m validace dat s r≈Øzn√Ωmi typy kontrol.
 */
function validujData() {
  var sheet = SpreadsheetApp.getActiveSheet();
  var data = sheet.getDataRange().getValues();
  var chyby = [];
  
  for (var i = 1; i < data.length; i++) { // P≈ôeskoƒçit hlaviƒçku
    var radek = data[i];
    var chybyRadku = [];
    
    // Validace emailu (sloupec A)
    if (!validujEmail(radek[0])) {
      chybyRadku.push('Neplatn√Ω email');
    }
    
    // Validace ƒç√≠sla (sloupec B)
    if (!validujCislo(radek[1])) {
      chybyRadku.push('Neplatn√© ƒç√≠slo');
    }
    
    // Validace datumu (sloupec C)
    if (!validujDatum(radek[2])) {
      chybyRadku.push('Neplatn√© datum');
    }
    
    if (chybyRadku.length > 0) {
      chyby.push('≈ò√°dek ' + (i + 1) + ': ' + chybyRadku.join(', '));
    }
  }
  
  if (chyby.length > 0) {
    Logger.log('‚ùå Nalezeny chyby:');
    chyby.forEach(function(chyba) {
      Logger.log('  ‚Ä¢ ' + chyba);
    });
    SpreadsheetApp.getActiveSpreadsheet().toast('Nalezeno ' + chyby.length + ' chyb!', 'Validace', 5);
  } else {
    Logger.log('‚úÖ V≈°echna data jsou validn√≠!');
    SpreadsheetApp.getActiveSpreadsheet().toast('V≈°echna data jsou v po≈ô√°dku!', 'Validace OK', 3);
  }
}

function validujEmail(email) {
  var regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return email && regex.test(email.toString());
}

function validujCislo(cislo) {
  return !isNaN(cislo) && cislo !== '';
}

function validujDatum(datum) {
  return datum instanceof Date && !isNaN(datum);
}
/**
 * Pokroƒçil√Ω debugging syst√©m s error handling a detailn√≠m logov√°n√≠m.
 */
function pokrocileDebugovani() {
  var startTime = new Date();
  var funkceNazev = 'pokrocileDebugovani';
  
  try {
    debugLog('üöÄ START', funkceNazev + ' spu≈°tƒõno');
    
    // Simulace pr√°ce s daty
    var data = SpreadsheetApp.getActiveSheet().getDataRange().getValues();
    debugLog('üìä DATA', 'Naƒçteno ' + data.length + ' ≈ô√°dk≈Ø');
    
    // Simulace mo≈æn√© chyby
    if (data.length === 0) {
      throw new Error('≈Ω√°dn√° data k zpracov√°n√≠');
    }
    
    // √öspƒõ≈°n√© dokonƒçen√≠
    var endTime = new Date();
    var duration = endTime - startTime;
    debugLog('‚úÖ SUCCESS', funkceNazev + ' dokonƒçeno za ' + duration + 'ms');
    
  } catch (error) {
    errorLog(funkceNazev, error);
    throw error; // Re-throw pro dal≈°√≠ zpracov√°n√≠
  }
}

function debugLog(typ, zprava) {
  var timestamp = new Date().toLocaleString();
  Logger.log('[' + timestamp + '] ' + typ + ': ' + zprava);
}

function errorLog(funkce, error) {
  var timestamp = new Date().toLocaleString();
  Logger.log('üö® [' + timestamp + '] ERROR in ' + funkce + ':');
  Logger.log('   Message: ' + error.message);
  Logger.log('   Stack: ' + error.stack);
}
/**
 * Generuje Code 128 barcode pomoc√≠ r≈Øzn√Ωch API slu≈æeb.
 */
function vygenerujBarcode128() {
  var text = '1234567890'; // Text pro barcode (ƒç√≠sla, p√≠smena, speci√°ln√≠ znaky)
  var sirka = 200; // ≈†√≠≈ôka barcodu v pixelech
  var vyska = 50; // V√Ω≈°ka barcodu v pixelech

  // Seznam r≈Øzn√Ωch Barcode API slu≈æeb
  var barcodeApis = [
    {
      name: 'Barcode-Generator API',
      url: 'https://barcodeapi.org/api/code128/' + encodeURIComponent(text) + '?width=' + sirka + '&height=' + vyska
    },
    {
      name: 'QR-Server Barcode (nespr√°vn√© API)',
      url: 'https://api.qrserver.com/v1/create-qr-code/?size=' + sirka + 'x' + vyska + '&format=png&qzone=0&data=' + encodeURIComponent(text)
    }
  ];

  Logger.log('üî¢ Generuji barcode pro text: ' + text);
  Logger.log('üìè Rozmƒõry: ' + sirka + 'x' + vyska + 'px');

  for (var i = 0; i < barcodeApis.length; i++) {
    try {
      Logger.log('üîÑ Zkou≈°√≠m Barcode API: ' + barcodeApis[i].name);
      Logger.log('üåê URL: ' + barcodeApis[i].url);
      
      var response = UrlFetchApp.fetch(barcodeApis[i].url);
      if (response.getResponseCode() === 200) {
        var blob = response.getBlob();
        var sheet = SpreadsheetApp.getActiveSheet();
        sheet.insertImage(blob, 2, 6); // ≈ò√°dek 2, sloupec F

        SpreadsheetApp.getActiveSpreadsheet().toast('Code 128 barcode vygenerov√°n pomoc√≠ ' + barcodeApis[i].name + '!', 'Hotovo', 3);
        Logger.log('‚úÖ Barcode √∫spƒõ≈°nƒõ vygenerov√°n pomoc√≠: ' + barcodeApis[i].name);
        Logger.log('üìä Barcode data: ' + text);
        return; // √öspƒõch, konƒç√≠me
      } else {
        Logger.log('‚ùå HTTP chyba ' + response.getResponseCode() + ' pro API: ' + barcodeApis[i].name);
      }
    } catch (error) {
      Logger.log('‚ùå Barcode API ' + barcodeApis[i].name + ' selhalo: ' + error.toString());
      continue; // Zkus√≠me dal≈°√≠ API
    }
  }
  
  // Pokud v≈°echna API selhala
  SpreadsheetApp.getActiveSpreadsheet().toast('V≈°echna Barcode API selhala. Zkuste to pozdƒõji.', 'Chyba', 5);
  Logger.log('‚ùå V≈°echna Barcode API selhala');
}